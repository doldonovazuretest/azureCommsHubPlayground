@page "/MonitoringConsole"

@inject ISessionState rqstState
@inject IIpAddressCheckRequestHandlerService ipAddressCheckHandler

<div class="row">
    <div class="col-md-6">
          <div class="row">
             <div class="col-md-12">
                   <EditForm OnValidSubmit="@sendIPAddressCheckRequest" Model="@model">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="create-form-container form-container">
                                    <div class="row">
                                        <div class="col-lg-4">
                                            <InputText class="input-text-standard" placeholder="ip address" @bind-Value="model.ip" />
                                        </div>                   
                                        <div class="col-lg-4">
                                            <button type="submit" class="btn btn-primary btn-sm">Run Check</button>
                                        </div>
                                    </div>
                                </div>
                    </EditForm>
             </div>
         </div>
          <div class="row">
             <div class="col-md-12">
               <div class="@statusAlertCss" role="alert">
                      requesting a check on @model.ip ...
                    </div>
            </div>
         </div>
          <div class="row">
             <div class="col-md-12">
                  <table class="table">
                      <thead>
                          <tr>
                             <th>ip</th>
                              <th>time</th>
                          </tr>
                      </thead>
                      <tbody>
                          @foreach(var _request in requests)
                        {
                            <tr>
                                <td>@_request.ip</td>
                                <td>@_request.timeStamp</td>
                            </tr>
                        }
                    </tbody>
                  </table>
             </div>
         </div>
    </div>
</div>

@code {
    ipAddresModel model = new ipAddresModel();
    List<requestDispatchLogHelper> requests = new List<requestDispatchLogHelper>();
    bool _requestInProgress = false;

    string statusAlertCss => _requestInProgress ? "alert alert-warning request-status-alert" : "alert alert-warning request-status-alert request-status-alert-hidden";

    async Task sendIPAddressCheckRequest()
    {     
        await trySendIPAddressCheckRequest(onSuccess, onFailure);        
    }

    void onSuccess()
    {
         logRequestToList(model.ip);
    }
    void onFailure(Exception ex)
    {

    }

    async Task trySendIPAddressCheckRequest(Action onSuccess, Action<Exception> onFaulted)
    {
        _requestInProgress = true;
        this.StateHasChanged();
        try
        {
            // this was for the test of UI refresh:  await Task.Delay(5000);
            if(!string.IsNullOrWhiteSpace(model.ip)) await ipAddressCheckHandler.checkIpAddress(model.ip);
           
            onSuccess();
        }
        catch (Exception e)
        {
            onFaulted(e);
        }
        finally
        {
            _requestInProgress = false;
        }
    }

    void logRequestToList(string _ip)
    {
        if(requests.Count > 20)
        {
            var _oldest = requests.LastOrDefault();
            if (_oldest != null) requests.Remove(_oldest);
        }

        requests.Add(new requestDispatchLogHelper() { ip = _ip, time = DateTime.Now });
    }
}
